# Team wokeuplikethis* - Rubin P., Raymond W. 
# SoftDev1 pd7
# K17 -- Average, ... or Basic?
# 2018-10-09

import sqlite3   #enable control of an sqlite database
import csv       #facilitates CSV I/O

DB_FILE = "database.db"

db = sqlite3.connect(DB_FILE) #open if file exists, otherwise create
c = db.cursor()               #facilitate db ops

# PARSE THROUGH CSV FILES AND CREATE A SQLITE-FRIENDLY LIST
def parse_csv(path_to_csv, header1, header2, header3):
    data = []  # will hold lists of records

    with open(path_to_csv, 'r') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            individual_rows = list((row[header1], row[header2], row[header3]))
            data.append(individual_rows)

    # print (data) # debug tool
            
    return data

# CREATE A DATABASE FROM LISTS GENERATED BY EACH .CSV FILE
#======== peeps.csv ========
command = "CREATE TABLE peeps (name TEXT, age INTEGER, id INTEGER)"
c.execute(command)

peeps = parse_csv('data/peeps.csv', 'name', 'age', 'id')
c.executemany('INSERT INTO peeps VALUES (?, ?, ?)', peeps)

#===== courses.csv ========
command = "CREATE TABLE courses (code TEXT, mark INTEGER, id INTEGER)"
c.execute(command)

courses = parse_csv('data/courses.csv', 'code', 'mark', 'id')
c.executemany('INSERT INTO courses VALUES (?, ?, ?)', courses)


# CREATE A DICTIONARY BASED OFF database.db FILE
#FORMAT: id : { 'name'   : '<name>' ,
#               'grades' : [<list of grades>] }
def create_dict_of_student_info():
    DICT = {}
    peeps = c.execute("SELECT * FROM peeps")
    for row in peeps:
        # prepare dictionary entry for student info
        DICT[ row[2] ] = {'name' : row[0] , 'grades' : []}
        # id : { 'name' : '<name>' , 'grades' : [] } 
        
    courses  = c.execute("SELECT * FROM courses")
    for row in courses:
        DICT[ row[2] ][ 'grades' ].append( row[1] )
        # append each grade to the list of grades
        # for the student w/ corresponding id

    # print (DICT) # debug tool
        
    return DICT 

# adds 'average' key-value pair to value of student id in student info dict
# id : { 'name'    : '<name>' ,
#        'grades'  : [<list of grades>] ,
#        'average' : [average]            }
def calc_avg():
    STUDENT_INFO = create_dict_of_student_info()

    for id in STUDENT_INFO.keys():
        # get all grades for student with id
        all_grades = STUDENT_INFO[id]['grades']
        # add key-value pair to DICT {id : avg}
        STUDENT_INFO[id]['average'] = sum(all_grades) / len(all_grades)

    # print (STUDENT_INFO) # debug tool
        
    # return modified dict
    return STUDENT_INFO

# create new table for student avgs
command = "CREATE TABLE peeps_avg (name TEXT, id INTEGER, avg INTEGER)"
c.execute(command)

def create_table_of_avgs():

    STUDENT_INFO = calc_avg() # get student info dict w/ averages

    for id in STUDENT_INFO.keys():
        c.execute( 'INSERT INTO peeps_avg VALUES (?, ?, ?)' , (id, STUDENT_INFO[id]['name'] , STUDENT_INFO[id]['average']) )

create_table_of_avgs()

def add_new_course(code, mark, id):
    cmd = "INSERT INTO courses VALUES (?, ?, ?)"
    c.execute( cmd, (code, mark, id) )
    
add_new_course("apcs", 90, 10)
# should show new course in table in database.db

#======== end of modifying data in database.db===========
db.commit() #save changes
db.close()  #close database

